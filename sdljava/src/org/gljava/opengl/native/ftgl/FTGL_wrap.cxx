/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.22
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};                                                    
#endif


#if defined(__GNUC__)
    typedef long long __int64; /*For gcc on Windows */
#endif
#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


    #include "FTFont.h"
    #include "FTFace.h"
    #include "FTGLBitmapFont.h"
    #include "FTGLExtrdFont.h"
    #include "FTGLOutlineFont.h"
    #include "FTGLPixmapFont.h"
    #include "FTGLPolygonFont.h"
    #include "FTGLTextureFont.h"

  void SWIG_BBox(const char* string, FTFont* font, float* llx, float* lly, float* llz, float* urx, float* ury, float* urz) {
    font->BBox(string, *llx, *lly, *llz, *urx, *ury, *urz);
  }


#ifdef __cplusplus
extern "C" {
#endif

JNIEXPORT void JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_delete_1FTFont(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    FTFont *arg1 = (FTFont *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTFont **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jboolean JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTFont_1Attach_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jboolean jresult = 0 ;
    FTFont *arg1 = (FTFont *) 0 ;
    char *arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTFont **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    result = (bool)(arg1)->Attach((char const *)arg2);
    
    jresult = (jboolean)result; 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTFont_1Attach_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
    jboolean jresult = 0 ;
    FTFont *arg1 = (FTFont *) 0 ;
    unsigned char *arg2 = (unsigned char *) 0 ;
    size_t arg3 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTFont **)&jarg1; 
    arg2 = *(unsigned char **)&jarg2; 
    arg3 = (size_t)jarg3; 
    result = (bool)(arg1)->Attach((unsigned char const *)arg2,arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTFont_1CharMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jboolean jresult = 0 ;
    FTFont *arg1 = (FTFont *) 0 ;
    FT_Encoding arg2 ;
    bool result;
    FT_Encoding *argp2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTFont **)&jarg1; 
    argp2 = *(FT_Encoding **)&jarg2; 
    if (!argp2) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null FT_Encoding");
        return 0;
    }
    arg2 = *argp2; 
    result = (bool)(arg1)->CharMap(arg2);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTFont_1CharMapCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    FTFont *arg1 = (FTFont *) 0 ;
    unsigned int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTFont **)&jarg1; 
    result = (unsigned int)(arg1)->CharMapCount();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTFont_1CharMapList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    FTFont *arg1 = (FTFont *) 0 ;
    FT_Encoding *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTFont **)&jarg1; 
    result = (FT_Encoding *)(arg1)->CharMapList();
    
    *(FT_Encoding **)&jresult = result; 
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTFont_1FaceSize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    FTFont *arg1 = (FTFont *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 = (unsigned int) (unsigned int)72 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTFont **)&jarg1; 
    arg2 = (unsigned int)jarg2; 
    arg3 = (unsigned int)jarg3; 
    result = (bool)(arg1)->FaceSize(arg2,arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTFont_1FaceSize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    FTFont *arg1 = (FTFont *) 0 ;
    unsigned int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTFont **)&jarg1; 
    result = (unsigned int)((FTFont const *)arg1)->FaceSize();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTFont_1Depth(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    FTFont *arg1 = (FTFont *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTFont **)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->Depth(arg2);
    
}


JNIEXPORT void JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTFont_1UseDisplayList(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
    FTFont *arg1 = (FTFont *) 0 ;
    bool arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTFont **)&jarg1; 
    arg2 = jarg2 ? true : false; 
    (arg1)->UseDisplayList(arg2);
    
}


JNIEXPORT jfloat JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTFont_1Ascender(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    FTFont *arg1 = (FTFont *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTFont **)&jarg1; 
    result = (float)((FTFont const *)arg1)->Ascender();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTFont_1Descender(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    FTFont *arg1 = (FTFont *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTFont **)&jarg1; 
    result = (float)((FTFont const *)arg1)->Descender();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTFont_1LineHeight(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jfloat jresult = 0 ;
    FTFont *arg1 = (FTFont *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTFont **)&jarg1; 
    result = (float)((FTFont const *)arg1)->LineHeight();
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTFont_1BBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jfloatArray jarg3, jfloatArray jarg4, jfloatArray jarg5, jfloatArray jarg6, jfloatArray jarg7, jfloatArray jarg8) {
    FTFont *arg1 = (FTFont *) 0 ;
    char *arg2 ;
    float *arg3 = 0 ;
    float *arg4 = 0 ;
    float *arg5 = 0 ;
    float *arg6 = 0 ;
    float *arg7 = 0 ;
    float *arg8 = 0 ;
    float temp3 ;
    float temp4 ;
    float temp5 ;
    float temp6 ;
    float temp7 ;
    float temp8 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTFont **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    {
        if (!jarg3) {
            SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
            return ;
        }
        if (jenv->GetArrayLength(jarg3) == 0) {
            SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
            return ;
        }
        arg3 = &temp3; 
    }
    {
        if (!jarg4) {
            SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
            return ;
        }
        if (jenv->GetArrayLength(jarg4) == 0) {
            SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
            return ;
        }
        arg4 = &temp4; 
    }
    {
        if (!jarg5) {
            SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
            return ;
        }
        if (jenv->GetArrayLength(jarg5) == 0) {
            SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
            return ;
        }
        arg5 = &temp5; 
    }
    {
        if (!jarg6) {
            SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
            return ;
        }
        if (jenv->GetArrayLength(jarg6) == 0) {
            SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
            return ;
        }
        arg6 = &temp6; 
    }
    {
        if (!jarg7) {
            SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
            return ;
        }
        if (jenv->GetArrayLength(jarg7) == 0) {
            SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
            return ;
        }
        arg7 = &temp7; 
    }
    {
        if (!jarg8) {
            SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
            return ;
        }
        if (jenv->GetArrayLength(jarg8) == 0) {
            SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
            return ;
        }
        arg8 = &temp8; 
    }
    (arg1)->BBox((char const *)arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8);
    
    {
        jfloat jvalue = (jfloat)temp3;
        jenv->SetFloatArrayRegion(jarg3, 0, 1, &jvalue);
    }
    {
        jfloat jvalue = (jfloat)temp4;
        jenv->SetFloatArrayRegion(jarg4, 0, 1, &jvalue);
    }
    {
        jfloat jvalue = (jfloat)temp5;
        jenv->SetFloatArrayRegion(jarg5, 0, 1, &jvalue);
    }
    {
        jfloat jvalue = (jfloat)temp6;
        jenv->SetFloatArrayRegion(jarg6, 0, 1, &jvalue);
    }
    {
        jfloat jvalue = (jfloat)temp7;
        jenv->SetFloatArrayRegion(jarg7, 0, 1, &jvalue);
    }
    {
        jfloat jvalue = (jfloat)temp8;
        jenv->SetFloatArrayRegion(jarg8, 0, 1, &jvalue);
    }
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jfloat JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTFont_1Advance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jfloat jresult = 0 ;
    FTFont *arg1 = (FTFont *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTFont **)&jarg1; 
    arg2 = *(wchar_t **)&jarg2; 
    result = (float)(arg1)->Advance((wchar_t const *)arg2);
    
    jresult = (jfloat)result; 
    return jresult;
}


JNIEXPORT jfloat JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTFont_1Advance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jfloat jresult = 0 ;
    FTFont *arg1 = (FTFont *) 0 ;
    char *arg2 ;
    float result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTFont **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    result = (float)(arg1)->Advance((char const *)arg2);
    
    jresult = (jfloat)result; 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTFont_1Render(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    FTFont *arg1 = (FTFont *) 0 ;
    char *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTFont **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->Render((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jint JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTFont_1Error(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    FTFont *arg1 = (FTFont *) 0 ;
    FT_Error result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTFont **)&jarg1; 
    result = (FT_Error)((FTFont const *)arg1)->Error();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_new_1FTFace_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    char *arg1 ;
    FTFace *result;
    
    (void)jenv;
    (void)jcls;
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return 0;
        }
    }
    result = (FTFace *)new FTFace((char const *)arg1);
    
    *(FTFace **)&jresult = result; 
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_new_1FTFace_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    unsigned char *arg1 = (unsigned char *) 0 ;
    size_t arg2 ;
    FTFace *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(unsigned char **)&jarg1; 
    arg2 = (size_t)jarg2; 
    result = (FTFace *)new FTFace((unsigned char const *)arg1,arg2);
    
    *(FTFace **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_delete_1FTFace(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    FTFace *arg1 = (FTFace *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTFace **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jboolean JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTFace_1Attach_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jboolean jresult = 0 ;
    FTFace *arg1 = (FTFace *) 0 ;
    char *arg2 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTFace **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    result = (bool)(arg1)->Attach((char const *)arg2);
    
    jresult = (jboolean)result; 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT jboolean JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTFace_1Attach_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
    jboolean jresult = 0 ;
    FTFace *arg1 = (FTFace *) 0 ;
    unsigned char *arg2 = (unsigned char *) 0 ;
    size_t arg3 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTFace **)&jarg1; 
    arg2 = *(unsigned char **)&jarg2; 
    arg3 = (size_t)jarg3; 
    result = (bool)(arg1)->Attach((unsigned char const *)arg2,arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTFace_1Face(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    FTFace *arg1 = (FTFace *) 0 ;
    FT_Face *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTFace **)&jarg1; 
    result = (FT_Face *)((FTFace const *)arg1)->Face();
    
    *(FT_Face **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTFace_1Size(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    jlong jresult = 0 ;
    FTFace *arg1 = (FTFace *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    FTSize *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTFace **)&jarg1; 
    arg2 = (unsigned int)jarg2; 
    arg3 = (unsigned int)jarg3; 
    {
        FTSize const &_result_ref = (arg1)->Size(arg2,arg3);
        result = (FTSize *) &_result_ref;
    }
    
    *(FTSize **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTFace_1CharMapCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    FTFace *arg1 = (FTFace *) 0 ;
    unsigned int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTFace **)&jarg1; 
    result = (unsigned int)(arg1)->CharMapCount();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTFace_1CharMapList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    FTFace *arg1 = (FTFace *) 0 ;
    FT_Encoding *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTFace **)&jarg1; 
    result = (FT_Encoding *)(arg1)->CharMapList();
    
    *(FT_Encoding **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTFace_1KernAdvance(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    jlong jresult = 0 ;
    FTFace *arg1 = (FTFace *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    FTPoint result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTFace **)&jarg1; 
    arg2 = (unsigned int)jarg2; 
    arg3 = (unsigned int)jarg3; 
    result = (arg1)->KernAdvance(arg2,arg3);
    
    *(FTPoint **)&jresult = new FTPoint((FTPoint &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTFace_1Glyph(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    jlong jresult = 0 ;
    FTFace *arg1 = (FTFace *) 0 ;
    unsigned int arg2 ;
    FT_Int arg3 ;
    FT_GlyphSlot result;
    FT_Int *argp3 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTFace **)&jarg1; 
    arg2 = (unsigned int)jarg2; 
    argp3 = *(FT_Int **)&jarg3; 
    if (!argp3) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null FT_Int");
        return 0;
    }
    arg3 = *argp3; 
    result = (arg1)->Glyph(arg2,arg3);
    
    *(FT_GlyphSlot **)&jresult = new FT_GlyphSlot((FT_GlyphSlot &)result); 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTFace_1GlyphCount(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    FTFace *arg1 = (FTFace *) 0 ;
    unsigned int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTFace **)&jarg1; 
    result = (unsigned int)((FTFace const *)arg1)->GlyphCount();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT jint JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTFace_1Error(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    FTFace *arg1 = (FTFace *) 0 ;
    FT_Error result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTFace **)&jarg1; 
    result = (FT_Error)((FTFace const *)arg1)->Error();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_new_1FTGLBitmapFont(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    char *arg1 ;
    FTGLBitmapFont *result;
    
    (void)jenv;
    (void)jcls;
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return 0;
        }
    }
    result = (FTGLBitmapFont *)new FTGLBitmapFont((char const *)arg1);
    
    *(FTGLBitmapFont **)&jresult = result; 
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_delete_1FTGLBitmapFont(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    FTGLBitmapFont *arg1 = (FTGLBitmapFont *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTGLBitmapFont **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTGLBitmapFont_1Render(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    FTGLBitmapFont *arg1 = (FTGLBitmapFont *) 0 ;
    char *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTGLBitmapFont **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->Render((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jlong JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_new_1FTGLExtrdFont_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    char *arg1 ;
    FTGLExtrdFont *result;
    
    (void)jenv;
    (void)jcls;
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return 0;
        }
    }
    result = (FTGLExtrdFont *)new FTGLExtrdFont((char const *)arg1);
    
    *(FTGLExtrdFont **)&jresult = result; 
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_new_1FTGLExtrdFont_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    unsigned char *arg1 = (unsigned char *) 0 ;
    size_t arg2 ;
    FTGLExtrdFont *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(unsigned char **)&jarg1; 
    arg2 = (size_t)jarg2; 
    result = (FTGLExtrdFont *)new FTGLExtrdFont((unsigned char const *)arg1,arg2);
    
    *(FTGLExtrdFont **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_delete_1FTGLExtrdFont(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    FTGLExtrdFont *arg1 = (FTGLExtrdFont *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTGLExtrdFont **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTGLExtrdFont_1Depth(JNIEnv *jenv, jclass jcls, jlong jarg1, jfloat jarg2) {
    FTGLExtrdFont *arg1 = (FTGLExtrdFont *) 0 ;
    float arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTGLExtrdFont **)&jarg1; 
    arg2 = (float)jarg2; 
    (arg1)->Depth(arg2);
    
}


JNIEXPORT jlong JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_new_1FTGLOutlineFont_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    char *arg1 ;
    FTGLOutlineFont *result;
    
    (void)jenv;
    (void)jcls;
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return 0;
        }
    }
    result = (FTGLOutlineFont *)new FTGLOutlineFont((char const *)arg1);
    
    *(FTGLOutlineFont **)&jresult = result; 
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_new_1FTGLOutlineFont_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    unsigned char *arg1 = (unsigned char *) 0 ;
    size_t arg2 ;
    FTGLOutlineFont *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(unsigned char **)&jarg1; 
    arg2 = (size_t)jarg2; 
    result = (FTGLOutlineFont *)new FTGLOutlineFont((unsigned char const *)arg1,arg2);
    
    *(FTGLOutlineFont **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_delete_1FTGLOutlineFont(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    FTGLOutlineFont *arg1 = (FTGLOutlineFont *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTGLOutlineFont **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTGLOutlineFont_1Render_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    FTGLOutlineFont *arg1 = (FTGLOutlineFont *) 0 ;
    char *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTGLOutlineFont **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->Render((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT void JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTGLOutlineFont_1Render_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    FTGLOutlineFont *arg1 = (FTGLOutlineFont *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTGLOutlineFont **)&jarg1; 
    arg2 = *(wchar_t **)&jarg2; 
    (arg1)->Render((wchar_t const *)arg2);
    
}


JNIEXPORT jlong JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_new_1FTGLPixmapFont_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    char *arg1 ;
    FTGLPixmapFont *result;
    
    (void)jenv;
    (void)jcls;
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return 0;
        }
    }
    result = (FTGLPixmapFont *)new FTGLPixmapFont((char const *)arg1);
    
    *(FTGLPixmapFont **)&jresult = result; 
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_new_1FTGLPixmapFont_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    unsigned char *arg1 = (unsigned char *) 0 ;
    size_t arg2 ;
    FTGLPixmapFont *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(unsigned char **)&jarg1; 
    arg2 = (size_t)jarg2; 
    result = (FTGLPixmapFont *)new FTGLPixmapFont((unsigned char const *)arg1,arg2);
    
    *(FTGLPixmapFont **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_delete_1FTGLPixmapFont(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    FTGLPixmapFont *arg1 = (FTGLPixmapFont *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTGLPixmapFont **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTGLPixmapFont_1Render_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    FTGLPixmapFont *arg1 = (FTGLPixmapFont *) 0 ;
    char *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTGLPixmapFont **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->Render((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT void JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTGLPixmapFont_1Render_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    FTGLPixmapFont *arg1 = (FTGLPixmapFont *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTGLPixmapFont **)&jarg1; 
    arg2 = *(wchar_t **)&jarg2; 
    (arg1)->Render((wchar_t const *)arg2);
    
}


JNIEXPORT jlong JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_new_1FTGLPolygonFont_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    char *arg1 ;
    FTGLPolygonFont *result;
    
    (void)jenv;
    (void)jcls;
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return 0;
        }
    }
    result = (FTGLPolygonFont *)new FTGLPolygonFont((char const *)arg1);
    
    *(FTGLPolygonFont **)&jresult = result; 
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_new_1FTGLPolygonFont_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    unsigned char *arg1 = (unsigned char *) 0 ;
    size_t arg2 ;
    FTGLPolygonFont *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(unsigned char **)&jarg1; 
    arg2 = (size_t)jarg2; 
    result = (FTGLPolygonFont *)new FTGLPolygonFont((unsigned char const *)arg1,arg2);
    
    *(FTGLPolygonFont **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_delete_1FTGLPolygonFont(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    FTGLPolygonFont *arg1 = (FTGLPolygonFont *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTGLPolygonFont **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jlong JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_new_1FTGLTextureFont_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
    jlong jresult = 0 ;
    char *arg1 ;
    FTGLTextureFont *result;
    
    (void)jenv;
    (void)jcls;
    {
        arg1 = 0;
        if (jarg1) {
            arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
            if (!arg1) return 0;
        }
    }
    result = (FTGLTextureFont *)new FTGLTextureFont((char const *)arg1);
    
    *(FTGLTextureFont **)&jresult = result; 
    {
        if (arg1) jenv->ReleaseStringUTFChars(jarg1, arg1); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_new_1FTGLTextureFont_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
    jlong jresult = 0 ;
    unsigned char *arg1 = (unsigned char *) 0 ;
    size_t arg2 ;
    FTGLTextureFont *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(unsigned char **)&jarg1; 
    arg2 = (size_t)jarg2; 
    result = (FTGLTextureFont *)new FTGLTextureFont((unsigned char const *)arg1,arg2);
    
    *(FTGLTextureFont **)&jresult = result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_delete_1FTGLTextureFont(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    FTGLTextureFont *arg1 = (FTGLTextureFont *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTGLTextureFont **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jboolean JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTGLTextureFont_1FaceSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    jboolean jresult = 0 ;
    FTGLTextureFont *arg1 = (FTGLTextureFont *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 = (unsigned int) (unsigned int)72 ;
    bool result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTGLTextureFont **)&jarg1; 
    arg2 = (unsigned int)jarg2; 
    arg3 = (unsigned int)jarg3; 
    result = (bool)(arg1)->FaceSize(arg2,arg3);
    
    jresult = (jboolean)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTGLTextureFont_1Render_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    FTGLTextureFont *arg1 = (FTGLTextureFont *) 0 ;
    char *arg2 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTGLTextureFont **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->Render((char const *)arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT void JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_FTGLTextureFont_1Render_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    FTGLTextureFont *arg1 = (FTGLTextureFont *) 0 ;
    wchar_t *arg2 = (wchar_t *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FTGLTextureFont **)&jarg1; 
    arg2 = *(wchar_t **)&jarg2; 
    (arg1)->Render((wchar_t const *)arg2);
    
}


JNIEXPORT jlong JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_SWIGFTGLBitmapFontUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(FTFont **)&baseptr = *(FTGLBitmapFont **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_SWIGFTGLExtrdFontUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(FTFont **)&baseptr = *(FTGLExtrdFont **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_SWIGFTGLOutlineFontUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(FTFont **)&baseptr = *(FTGLOutlineFont **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_SWIGFTGLPixmapFontUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(FTFont **)&baseptr = *(FTGLPixmapFont **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_SWIGFTGLPolygonFontUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(FTFont **)&baseptr = *(FTGLPolygonFont **)&jarg1;
    return baseptr;
}

JNIEXPORT jlong JNICALL Java_org_gljava_opengl_ftgl_SWIG_1FTGLJNI_SWIGFTGLTextureFontUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(FTFont **)&baseptr = *(FTGLTextureFont **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

